use 5.008;
use ExtUtils::MakeMaker;
# See lib/ExtUtils/MakeMaker.pm for details of how to influence
# the contents of the Makefile that is written.
WriteMakefile(
    NAME              => 'HTTP::HeaderParser::XS',
    VERSION_FROM      => 'lib/HTTP/HeaderParser/XS.pm', # finds $VERSION
    PREREQ_PM         => {},
    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005
      (ABSTRACT_FROM  => 'lib/HTTP/HeaderParser/XS.pm', # retrieve abstract from module
       AUTHOR         => 'Mark Smith <mark@xb95.com>') : ()),
    LIBS              => ['-lstdc++'], # e.g., '-lm'
    DEFINE            => '', # e.g., '-DHAVE_SOMETHING'
    INC               => '-I.', # e.g., '-I. -I/usr/include/other'
	# Un-comment this if you add C files to link with later:
    OBJECT            => 'headers.o HTTPHeaders.o', # link all the C files too
    XSOPT             => '-C++',
    CCFLAGS           => '-g',
    CC                => 'g++',
    LD                => 'g++',
    META_MERGE        => {
        'meta-spec' => { version => 2 },
        resources => {
            repository => {
                type => 'git',
                url => 'https://github.com/xb95/http-headerparser-xs.git',
                web => 'https://github.com/xb95/http-headerparser-xs',
            },
        },
    },
);
if  (eval {require ExtUtils::Constant; 1}) {
  # If you edit these definitions to change the constants used by this module,
  # you will need to use the generated const-c.inc and const-xs.inc
  # files to replace their "fallback" counterparts before distributing your
  # changes.
  my @names = (qw(H_REQUEST H_RESPONSE M_DELETE M_GET
		 M_OPTIONS M_POST M_PUT M_HEAD));
  ExtUtils::Constant::WriteConstants(
                                     NAME         => 'HTTP::HeaderParser::XS',
                                     NAMES        => \@names,
                                     DEFAULT_TYPE => 'IV',
                                     C_FILE       => 'const-c.inc',
                                     XS_FILE      => 'const-xs.inc',
                                  );

}
else {
  use File::Copy;
  use File::Spec;
  foreach my $file ('const-c.inc', 'const-xs.inc') {
    my $fallback = File::Spec->catfile('fallback', $file);
    copy ($fallback, $file) or die "Can't copy $fallback to $file: $!";
  }
}
